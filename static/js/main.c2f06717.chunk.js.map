{"version":3,"sources":["components/AllGames.module.css","components/XP.module.css","components/Friend.module.css","components/ProfileGame.module.css","components/About.module.css","components/MainPage.module.css","utils/publicUrl.js","utils/initialData.js","components/Search.js","utils/uniqueId.js","contexts/DataContext.js","components/XP.js","components/NavBar.js","components/MainPage.js","components/AllGames.js","components/About.js","components/GamePage.js","components/Friend.js","components/ProfileGame.js","components/Profile.js","components/Game.js","hooks/input-hook.js","components/AddGame.js","components/Feedback.js","components/App.js","serviceWorker.js","index.js","components/GamePage.module.css","components/Feedback.module.css","components/AddGame.module.css","components/Profile.module.css","components/Search.module.css","components/NavBar.module.css"],"names":["module","exports","assetPath","startsWith","process","currentUserId","about","users","id","email","photo","name","xp","level","friends","userId","friendId","amountOfVotes","unoId","connect4Id","battleshipId","catanId","codenamesId","tabooId","clueId","scrabbleId","yahtzeeId","monopolyId","secrethitlerId","riskId","games","totalPicks","gameTags","tagOne","tagTwo","tagThree","gameName","gameId","gameDescription","gameRules","userGameVote","addedBy","votedOnce","gameStrategy","Search","React","useState","searchTerm","setSearchTerm","searchResults","setSearchResults","data","map","game","useEffect","results","filter","toLowerCase","includes","length","className","css","searchbar","type","placeholder","value","onChange","e","target","item","to","concat","prefix","Date","valueOf","toString","milliseconds","start","getTime","i","sleep","DataContextProvider","props","JSON","parse","window","localStorage","getItem","initialData","setData","setItem","stringify","Provider","addVote","find","a","console","log","removeVote","addGame","t1","t2","t3","im","gd","gr","newgame","uniqueId","addXPGame","children","DataContext","createContext","Xp","useContext","now","mastercontainer","NavBar","header","navbar","logo","width","height","src","publicUrl","mainNav","navItem","bar","profileSettings","profile","gear","alt","GearSubmenu","submenu","submenuitem","MainPage","sorted_games","sort","b","number_one","number_two","number_three","path_one","path_two","path_three","randomNumber","Math","floor","random","randomGame","pageborder","row1","top","trophy","row","col4","col6","topthree","three","col3","white","dice","dicemove","AllGames","renderGames","list","main","row2","col10","nameofgame","totalvotes","col2","categories","About","managers","people","col1","hot","button","GamePage","useParams","chosenGameData","chosenUser","chosenGameDescription","chosenGameName","chosenGameRules","chosenGameStrategy","chosenGameImage","handleVote","masterContainer","topic","column","failSafeColumn","gameImage","fill","smallRow","smallColumnLeft","smallDesc","smallColumnRight","voteButton","onClick","unvoteButton","clear","gameOptionsDesc","gameOptions","Friend","friend","ProfileGame","myColor","color","style","gamePhoto","Profile","myFriends","f","myupvotes","g","mygames","profilePage","leftElement","userWindow","profilePicture","username","description","editProfileButton","rightElement","myGameShowcase","showcaseTitle","gameList","index","key","uploadGameButton","bottomElements","myUpvotes","title","upvoteList","Game","useInput","initialValue","setValue","bind","event","AddGame","gamename","bindgamename","tag1","bindtag1","tag2","bindtag2","tag3","bindtag3","image","bindimage","gamedesc","bindgamedesc","gamerules","bindgamerules","text","form","onSubmit","evt","preventDefault","alert","location","href","marginBottom","required","marginTop","Feedback","experienceRating","feedback","userLikes","bindUserLikes","userDislikes","bindUserDislikes","userSuggestions","bindUserSuggestions","userThoughts","bindUserThoughts","radios","document","getElementsByName","checked","masterForm","backgroundColor","outline","fontSize","App","body","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2f06717.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AllGames_main__1R5KS\",\"game\":\"AllGames_game__1DzVW\",\"row2\":\"AllGames_row2__3uovY\",\"col1\":\"AllGames_col1__1kW-I\",\"col2\":\"AllGames_col2__9te5w\",\"col3\":\"AllGames_col3__3aHhx\",\"col4\":\"AllGames_col4__3KEtx\",\"col5\":\"AllGames_col5__1Lg_C\",\"col6\":\"AllGames_col6__1tCAZ\",\"col7\":\"AllGames_col7__qlLf6\",\"col8\":\"AllGames_col8__QbXvj\",\"col9\":\"AllGames_col9__3R_KO\",\"col10\":\"AllGames_col10__1bZJ9\",\"col11\":\"AllGames_col11__1_woI\",\"col12\":\"AllGames_col12__JxN7F\",\"categories\":\"AllGames_categories__30-Ut\",\"totalvotes\":\"AllGames_totalvotes__1SFhI\",\"nameofgame\":\"AllGames_nameofgame__3z6Qd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mastercontainer\":\"XP_mastercontainer__16Tmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friend_friend__3rkjL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"ProfileGame_game__1Cqg3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"About_top__1hm69\",\"pageborder\":\"About_pageborder__3AkoN\",\"center2\":\"About_center2__3OCWl\",\"row\":\"About_row__A_K7F\",\"col1\":\"About_col1__1EO-a\",\"col2\":\"About_col2__2rXaO\",\"removestyle\":\"About_removestyle__294E5\",\"col3\":\"About_col3__39CZ6\",\"hot\":\"About_hot__1NxH2\",\"button\":\"About_button__3Wrwk\",\"button4\":\"About_button4__22uM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topthree\":\"MainPage_topthree__3GV2E\",\"pageborder\":\"MainPage_pageborder__25cc5\",\"top\":\"MainPage_top__33F6I\",\"trophy\":\"MainPage_trophy__IEn_f\",\"row\":\"MainPage_row__2BBjb\",\"row1\":\"MainPage_row1__1uuO7\",\"dice\":\"MainPage_dice__1tOcZ\",\"dicemove\":\"MainPage_dicemove__3dC5O\",\"spin\":\"MainPage_spin__2Ot9S\",\"col1\":\"MainPage_col1__hv1pn\",\"col2\":\"MainPage_col2__1XR32\",\"col3\":\"MainPage_col3__2vTnZ\",\"col4\":\"MainPage_col4__3DS8v\",\"col5\":\"MainPage_col5__3FcJP\",\"col6\":\"MainPage_col6__dW3tG\",\"col7\":\"MainPage_col7__3padw\",\"col8\":\"MainPage_col8__3vwdO\",\"col9\":\"MainPage_col9__2Tbp9\",\"col10\":\"MainPage_col10__1lf67\",\"col11\":\"MainPage_col11__3rOG3\",\"col12\":\"MainPage_col12__-UNq1\",\"white\":\"MainPage_white__2E1-3\",\"three\":\"MainPage_three__3-J1q\"};","export default (assetPath) => {\n    const publicUrl = assetPath.startsWith('data:image') ? '' : process.env.PUBLIC_URL;\n    return publicUrl + assetPath;\n  }","/* sample data store*/\r\nexport default {\r\n    currentUserId: \"Manogya\",\r\n\r\n    about:\"CardBored Games is an online encyclopedia of card and board games for users seeking game rules, strategies, an online community, and an access to online version of games. Initially developed during the COVID-19 crisis, we aimed to provide entertainment for those individuals required to stay in their households to ideally opt for time-burning activities such as card/web games. Our website provides rules and strategies for all kinds of card games and gives game suggestions based on the number of players and types of game desired. Additionally, we have an option for members to submit their own games and also anonymously vote on other games.\",\r\n  \r\n    users: [\r\n      {\r\n        id: \"Manogya\",\r\n        email: \"manogya@bc.edu\",\r\n        photo: \"/assets/user1.png\",\r\n        name: \"Manogya\", // name displayed on application and friends list\r\n        xp:50,\r\n        level:15,\r\n      },\r\n      {\r\n        id: \"Eric\",\r\n        email: \"eric@bc.edu\",\r\n        photo: \"/assets/user2.png\",\r\n        name: \"Wangatang\",\r\n      },\r\n      {\r\n        id: \"Jun\",\r\n        email: \"jun@bc.edu\",\r\n        photo: \"/assets/user3.png\",\r\n        name: \"Junso7\",\r\n      },\r\n      {\r\n        id: \"Kamil\",\r\n        email: \"kamil@bc.edu\",\r\n        photo: \"/assets/user3.png\",\r\n        name: \"kamilPis7\",\r\n      },\r\n    ],\r\n  \r\n    friends: [\r\n      // current friends across all users\r\n      {\r\n        userId: \"Manogya\",\r\n        friendId: \"Eric\",\r\n      },\r\n      {\r\n        userId: \"Manogya\",\r\n        friendId: \"Jun\",\r\n      },\r\n      {\r\n        userId: \"Manogya\",\r\n        friendId: \"Kamil\",\r\n      },\r\n      {\r\n        userId: \"Manogya\",\r\n        friendId: \"Jun\",\r\n      },\r\n      {\r\n        userId: \"Kamil\",\r\n        friendId: \"Eric\",\r\n      },\r\n      {\r\n        userId: \"Jun\",\r\n        friendId: \"Eric\",\r\n      },\r\n      {\r\n        userId: \"Kamil\",\r\n        friendId: \"Jun\",\r\n      },\r\n    ],\r\n\r\n  \r\n    amountOfVotes: [\r\n      //total votes of a game across all users\r\n      {\r\n        unoId: 3,\r\n        connect4Id: 0,\r\n        battleshipId: 0,\r\n        catanId: 1,\r\n        codenamesId: 2,\r\n        tabooId: 1,\r\n        clueId: 2,\r\n        scrabbleId: 1,\r\n        yahtzeeId: 0,\r\n        monopolyId: 1,\r\n        secrethitlerId: 4,\r\n        riskId: 0,\r\n      },\r\n    ],\r\n  \r\n    games: [\r\n      {\r\n        totalPicks: 47770,\r\n        gameTags: { tagOne: \"speed\", tagTwo: \"competition\", tagThree: \"family\" },\r\n        gameName: \"Uno\",\r\n        gameId: \"unoId\",\r\n        photo: \"/assets/uno.jpg\",\r\n        gameDescription:\r\n        \"An American shedding-type card game that is played with a specially printed deck. The game's general principles put it into the Crazy Eights family of card games, and it is similar to the traditional European game Mau-Mau.\",\r\n        gameRules:\r\n          \"The object of UNO is playing all the cards in your hand. When only one card is remaining, the cardholder must shout Uno! alerting others that he or she is down to the last card in his or her hand. A simple draw of cards determines the game's dealer; the person who chooses the card with the highest numerical value deals. If a player selects a non-numerical card, he or she returns it to the deck and chooses another. Each player is dealt seven cards at the game's start, with the remaining ones placed facedown to form a draw pile. The top card of the draw pile is turned over to begin a discard pile. The first player has to match the card in the discard pile either by number, color or word. For example, if the card played is a red 7, the next player must throw down a red card or a 7 of any color. The player can also play a Wild or a Wild Draw Four card, the latter only if he or she doesn't have a playable card in that color. If the player doesn't have a playable card, he or she must pick a card from the draw pile and play it, if possible. If the card plucked from the draw pile isn't playable, the next player must take his or her turn. When a player has one card left, he or she must yell Uno! If the player forgets, he or she has to pick two cards from the draw pile. So much for imminent victory. Once a player has no cards left, the hand is over. Points are scored, and the dealer doles out new hands to everyone. Scoring UNO is simple. When a player plays all his or her cards, the others count their points based on their remaining cards. Numbered cards are face value, colored special cards are worth 20 points and Wild cards are worth 50 points. The first player to play all of his or her cards receives points for the cards left in the opponents' hands. The first person to reach 500 points is declared the winner.\",\r\n        userGameVote: 1,\r\n        addedBy: \"admin\",\r\n        votedOnce:1,\r\n        gameStrategy:\r\n          \"Keeping track of what cards have been played will require you to pay attention to what is going on around you. Using your Skip and Reverse cards strategically will aid you in the one calling Uno instead of another player. You also have to pay attention to the number of cards each player has left in their hand. As with the Skip and Reverse card, the Draw-Two card also has to be played strategically. They are a perfect way to keep a player low on cards from winning that round. Try to hold onto the Wild card as long as you are able and not use it so soon for it may be wasted. Wild cards can be used at any point in the game no matter what has been played.\",\r\n      },\r\n      {\r\n        totalPicks: 2032,\r\n        gameTags: {\r\n          tagOne: \"strategy\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"quick\",\r\n        },\r\n        gameName: \"Connect4\",\r\n        gameId: \"connect4Id\",\r\n        photo: \"/assets/connect4.jpg\",\r\n        votedOnce:0,\r\n        gameDescription:\r\n        \"A two-player connection board game in which the players first choose a color and then take turns dropping one colored disc from the top into a seven-column, six-row vertically suspended grid. The pieces fall straight down, occupying the lowest available space within the column.\",\r\n        gameRules:\r\n          \"The aim for both players is to make a straight line of four own pieces; the line can be vertical, horizontal or diagonal. Before starting, players decide randomly which of them will be the beginner; moves are made alternatively, one by turn. Moves entails in placing new pieces on the board; pieces slide downwards from upper holes, falling down to the last row or piling up on the last piece introduced in the same column. So, in every turn the introduced piece may be placed at most on seven different squares. The winner is the first player who gets a straight line made with four own pieces and no gaps between them.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Anticipate Your Opponent's Moves: Connect 4 is indeed very similar to other strategy games, but for players who are not used to the rack, it can be almost intimidating. One of the most important things to remember while playing is that you need to anticipate your opponent's moves. You don't want to inadvertently force your opponent into a winning position! Stay in the Middle: On the standard seven-column board, any connect-four that is not vertical must use one checker from the center column. This means that if you control most of the central column, it will be very difficult for your opponent to get a connect-four. Fork Your Threats Whenever Possible: The ideal position is to have two potential connect-fours that need a final checker on two spaces that are on top of each other. This will usually lead to a victory because you can threaten in the first space. If the opponent fails to block, you win. If the opponent blocks, you play on top to win in the next space. A simple way to set this up is to make a 7 with your checkers, such that finishing the horizontal or diagonal connect-four on the right will be two spaces on top of each other.\",\r\n      },\r\n      {\r\n        totalPicks: 543,\r\n        gameTags: {\r\n          tagOne: \"strategy\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"family\",\r\n        },\r\n        gameName: \"Battleship\",\r\n        gameId: \"battleshipId\",\r\n        votedOnce:1,\r\n        photo: \"/assets/battleship.png\",\r\n        gameDescription:\r\n        \"A strategy type guessing game for two players. It is played on ruled grids (paper or board) on which each player's fleet of ships (including battleships) are marked. The locations of the fleets are concealed from the other player. Players alternate turns calling shots at the other player's ships, and the objective of the game is to destroy the opposing player's fleet.\",\r\n        gameRules:\r\n          \"Players take turns firing shots (by calling out a grid coordinate) to attempt to hit the opponent's enemy ships. On your turn, call out a letter and a number that identifies a row and column on your target grid. Your opponent checks that coordinate on their ocean grid and verbally responds miss if there is no ship there, or hit if you have correctly guessed a space that is occupied by a ship. Mark each of your shots or attempts to fire on the enemy using your target grid (upper part of the board) by using white pegs to document your misses and red pegs to register your hits. As the game proceeds, the red pegs will gradually identify the size and location of your opponent's ships. When it is your opponent's turn to fire shots at you, each time one of your ships receives a hit, put a red peg into the hole on the ship corresponding to the grid space. When one of your ships has every slot filled with red pegs, you must announce to your opponent when your ship is sunk. In classic play, the phrase is You sunk my battleship!\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Don't place your ships touching each other: An opponent who scores a hit on your grid will likely circle that point looking for the rest of the ship. If your opponent finds two ships at once, you've just lost an extra ship. Place asymmetrical: The human mind seeks patterns. So, don't mirror or copy your ship placements. If you have a ship one square away from both edges in the upper left, don't do the same thing in the lower right because else your opponent will be more likely to find both ships after finding the first one. Guess in diagonal lines: By firing shots along a diagonal line, you guarantee that each of your shots is located in a new row, and a new column, thus maximizing the number of rows and columns into which you are firing. Don't bunch up your shots early on: Your initial goal is to cover as much ground as possible. So, never fire at adjacent holes but leave a few spaces between your shots. After your opening salvo, you can go back and fill in the gaps in your diagonal lines. Once you have fired enough shots, you'll notice that the board is devided now into small chunks. Now, you should systematically take shots in each chunk to eliminate the possibility of your opponent's biggest remaining ship existing in that region.\",\r\n      },\r\n      {\r\n        totalPicks: 791,\r\n        gameTags: {\r\n          tagOne: \"strategy\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"family\",\r\n        },\r\n        gameName: \"Catan\",\r\n        gameId: \"catanId\",\r\n        votedOnce:1,\r\n        photo: \"/assets/catan.jpg\",\r\n        gameDescription:\r\n        \"Players take on the roles of settlers, each attempting to build and develop holdings while trading and acquiring resources. Players gain points as their settlements grow; the first to reach a set number of points, typically 10, wins.\",\r\n        gameRules:\r\n          \"Prepare the game board: Setup the board as either a copy of the introductory setup, randomly flip over tiles and place the numbers in alphabetical order spiraling in, or completely randomly tiles and numbers. Playing Development Cards: For your turn, you can play 1 development card at any time (including before you roll), but not one that you bought that turn. Income: Roll dice for income that turn - everyone with settlements/cities next to a tile with that number gets one/two of that resource per settlement/city adjacent to it (respectively). The Robber: If you roll a 7, you must move the robber (that weird bowling pin looking thing) to any hex of your choice. Then choose a player that has a settlement/city next to that hex. Steal a card at random from their hand. While the robber stays their, that hex doesn't produce anything (you can signify this by putting him on top of the number.) Using a Knight card allows you to perform this entire action immediately. Then, if this was a 7-roll (not a Knight), each player with 8+ resource cards in hand (not development cards) discards half of their choice, keeping rounded up. Buy/Trade: Then you can offer/receive trades and buy things. People can only trade with the current player. The offers do not have to be equal, they often won't be. I.e. if everyone wants to build a city, then Ore and Grain will be at a premium. Bank Exchange: The current player can also trade with the bank, either 4 of a single thing for 1 of anything (always an option), or use a port (i.e. 3:1 of any single resource, or 2:1 of a specific resource type for 1 of anything, instead) if you have a settlement/city on that port (there are 2 spots for each port.) What to Buy: There are 4 things you can buy: Roads, Settlements, Cities (an upgrade), and Development Cards. You can buy any number of them. (Use the 4 reference cards that come with the game for the costs.) Roads: You must have roads going from one of your settlements/cities to the location you are building a new settlement. Your starting settlements do not need to be connected to each other. End Your Turn: Then you pass the turn to the next player, and they start by either playing a development card or rolling the dice. Victory: You win when you have 10 points - 1 point per settlement, 2 points per city, 2 points for Largest Army (Minimum 3+) and/or Longest Road (Single continuous branch, no double counting, Minimum 5+), 1 point for victory point development cards (which are 5/25 development cards.) Victory point development cards: Victory point development cards are special. They're the only ones that may be played all at the same time, immediately, when you would win as a result. Otherwise, you must hold them and, if you want, perhaps pretend that they aren't victory point cards that could win you the game next turn if they let you do that one last trade.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Wood/brick (leads to longest road): Build lots of settlements. Build your future settlements on grain/ore hexes in order to build cities. Build roads to cut off other players expansion, very useful in cutting off grain/ore players who might not be able to expand as fast as you can. Initial settlement placement: Try to get your initial settlements on a total dot count of 11-13, this generally leads to strong resource production. Always put the first 2 settlements on 3 resource hex possibilities (not at the water where there are only 2 possibilities). You don’t want to constrict your resource growth at the start, you can always expand later to the water to grab a port. Try to spread out your settlements on as many different numbers as possible so that your resource cards don’t come in huge batches – which may lead to robber losses down the road. This is an extremely key point, by doing this you are able to get resources no matter what number is rolled, which leads to steady and consistent building. I saw this approach work first hand last game, my friend had his settlements spread out among basically every number from 4-9 and he thus got resources seemingly every roll of the dice. And his cards came slowly, instead of in big batches. Review the board at first and try to put a settlement on the rarest resource that you see (either by sheer number of tiles in the game or that the numbers on the tiles are not good), this will become extremely valuable for trading purposes later. Generally it will result in you getting 2 resource cards for your 1 resource card in trading, which can be really valuable for future building. Expansion opportunity priorities: 1. Go for the spot with the most dots, 2. Increase diversity of resources you produce, 3. Try to get to a nearby port. Make sure you are not cut off from future expansion opportunities, use roads to make sure of this, watch where your opponents are building towards. Don’t place settlements just to try to screw others players, only think about yourself first and foremost. If in the process of getting a solid settlement placement you screw another player in the process, then that is great because you accomplished 2 missions in 1 shot. In terms of settlements/cities, try to put your settlements/cities on hexes that have other players on them as well so that the hex is shared. This can help with keeping the robber off your hexes, since other players are also involved in the hex too. The riskiest play in my opinion is to completely monopolize a hex (3 cities on 1 hex), this makes you a huge target for the robber, and you better have knights handy to get the robber off that hex in case the robber lands on that hex. I generally wouldn’t recommend monopolizing hexes, because it results in huge swings in terms of the number of cards in your hand, and the robber threat mentioned above. I did this in my last game, and while it did pay off okay (because another player was clearly in the lead the whole game and thus the robber was always on them), I don’t like to do it unless things just work out that way.\",\r\n      },\r\n      {\r\n        totalPicks: 3190,\r\n        gameTags: { tagOne: \"team\", tagTwo: \"competition\", tagThree: \"strategy\" },\r\n        gameName: \"Codenames\",\r\n        gameId: \"codenamesId\",\r\n        photo: \"/assets/codenames.jpg\",\r\n        votedOnce:0,\r\n        gameDescription:\r\n        \"Two teams compete by each having a spymaster give one-word clues that can point to multiple words on the board. The other players on the team attempt to guess their team's words while avoiding the words of the other team. In a variant with 2â€“3 players, one spymaster gives clues to the other player or players.\",\r\n        gameRules:\r\n          \"Divide the players up into two equal teams. Each team then chooses a spymaster. The spymaster for each team sit next to each other, but across the table from their own team. Every other player is an agent for their team. Shuffle the codename tiles and place 25 of them (face up) in a 5 by 5 square. Shuffle the “key” cards and place one of the cards into the square “key” in secret from all of the agents in the game. This is the “secret key” that reveals the identities behind the codenames. The agents may never view the secret key. Blue squares represent blue agents that the blue team needs to contact. Red squares represent red agents that the red team needs to contact. White or Neutral squares represent bystanders. Black square represents the assassin. The lights around the square key code show which team goes first. The team going first takes their 8 agent cards and the double agent and is placed in front of that team’s spymaster. The other 8 agent cards go to the second team and go to that team’s spymaster. The remaining bystander cards, and assassin, are placed between the two spymasters. Each team takes turns trying to guess the secret identities of their own agents working off of a single word clue from their spymaster. The spymaster may only utter a single word as a clue and a number. The number that they may say is the number of cards on the board that this clue applies to. If there are codenames that say “pig” and “farm” then the spymaster might say “livestock:2”. The spymaster must keep a straight face and give no other clues. The spymaster may use 0 to indicate that “none of our words use this clue”. In this case the agents are allowed unlimited guesses. The spymaster may also indicate “unlimited” as their number. This also allows unlimited guesses. The disadvantage is that the agents won’t know how many words relate to the clue that was just given. Agents attempt to guess which codename(s) correspond to the present or previous clue(s) given. Once the agents of that team decide on a single tile, the agents tap it with their finger, and then the spymaster checks their answer against the key and places the corresponding card (agent, assassin, bystander) over the top of the codename (and leaves it there). If your own agent is revealed, then your team has guessed correctly and may guess again, but not receive another clue. They may guess up to the limit imposed by the spymaster but may always add one extra guess. The agents may also decide not to pick a card and pass the turn. If the agents contact the wrong color, then the turn passes and the agent is revealed for the other team. If a bystander is revealed then the turn is passed. If the assassin is revealed then that team loses instantly. The game is over. Winning the Game: You win the game by successfully contacting all of your agents. It is possible to win on your opponents turn if they contact your last agent for you. Penalties and Word Rules: The following are the “base line” rules that should be followed, but try not to be too strict; it’s generally up to the other spymaster to call out invalid rules. If they allow it then its allowed. There are a lot of rule variations for what is an allowable clue and what is actually invalid. Invalid clues are penalized by automatically revealing an opponents agent and ending your turn. Invalid rules must be caught and called out at the time that they are given or else they become valid. Invalid clues include the spymaster giving body language or signals to their agents. Spymasters are not allowed to give anything more than 1 clue and 1 number. Your clue must be about the “meaning” of the word. You can’t give a clue towards its spelling or letter arrangements. You may not use the number as part of the clue. You may not use a foreign language to identify the word unless its a commonly used/accepted word in the language being used for the game. You may not use a word that is an active codename in any of your clues. You may regain the use of that word if the codename is revealed. You may spell out your clue if it will help avoid confusion between two words that sound the same or if you don’t want to commit to a specific pronunciation of a word that has more than one meaning. Another player may also request a clue spelled out.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Spymasters: Scan the Whole Board: Spymasters can easily develop tunnel vision by just focusing on coming up with clues for their colored words. However, it is crucial the scan to the whole board in case the clue might accidentally trigger decoy cards. Mostly importantly, there should be no association with the assassin word. Making a Roadmap for the Game: It is not necessary to plan too far ahead. As the game progresses and cards are removed, you may be able to devise better clues that were not possible before. However, planning becomes important near the end. Many times, you can get stuck with words like “parachute” and “ketchup”, where it is nearly impossible to find a good common clue. I recommend thinking of combinations of all words when there are ~4 remaining. Zero Clues: The zero clue is a powerful tool to help you score big rounds by eliminating a word. Imagine the words are “bride,” “flowers,” “altar,” “love,” “cake,” “proposal,” and “ring.” However, “cake” is a decoy. You can give the clue (Baking, 0) to signal to your team to avoid “cake.” The next round, you could say (Wedding, 6)! Zero clues are also useful for nullifying the assassin, especially if it is similar to one of your target words. However, since a game of Codenames can be won in ~3–6 turns, wasting a round is a high price to pay. Teammates: Would another word have worked better?: The best and only strategy needed when guessing words is thinking of hypothetical clues. If the spymaster guesses “animal” and you are considering guessing “manatee” and “dolphin,” you might want to think twice. While they are both animals, clues such as “aquatic” or “narwhal” are much more specific. If there is an obvious better choice for the clue, this should be a red flag and can help when you are wavering between multiple guesses.\",\r\n      },\r\n      {\r\n        totalPicks: 5098,\r\n        gameTags: { tagOne: \"team\", tagTwo: \"competition\", tagThree: \"puzzle\" },\r\n        gameName: \"Taboo\",\r\n        gameId: \"tabooId\",\r\n        photo: \"/assets/taboo.png\",\r\n        votedOnce:1,\r\n        gameDescription:\r\n        \"The objective of the game is for a player to have their partners guess the word on the player's card without using the word itself or five additional words listed on the card.\",\r\n        gameRules:\r\n          \"Six or more players are divided up into two teams, with one team referred to as Team A and the other team referred to as Team B. 504 cards are placed in the card holder and Team A selects a person in their group to be the Clue-giver. This person takes the card holder and places the first card away from his team so that they cannot see it. Clue cards have the clue word on the top of the card and the taboo words listed below the clue word. Clue-givers then start and keep the timer and must get their team to say the guess-word on the card without using one of the taboo words in one of their clues. If a taboo word is used then Team B must sound the buzzer which penalizes Team A by causing the current guess card to go into the discard pile. Play is continued until time runs out. Each time a teammate successfully guesses a clue-word, a new card is placed upon the old and each card in this pile represents one point for Team A. The team not giving clues must watch for Taboos or other violations of the rules. If they successfully spot a rule being broken, they may use their buzzer to interrupt play and very briefly explain the infraction. Clue-givers must place the current card into the discard pile and draw a new one. Each card in the discard pile represents one point for the other team. Once time runs out, the teams are swapped and roles are reversed. Once each player has taken a turn as clue-give, r the game ends. If teams are uneven, a player on the smaller team will be clue-giver twice. Keep in mind: 1. Clue-givers may not use any taboo words, including abbreviations and any part of the taboo word. 2. Clue-givers may not use sound effects or use gestures to indicate the clue word. 3. Clue-givers may pass on any card at any time, but the card is then placed in the discard pile. 4. When time is called, the final card does not go into the discard pile, but is instead removed from play. Every card stacked upon another in the card holder represents one point for Team A. Every card stacked in the discard pile represents one point for Team B. The final card in play when time runs out is worth no points for either team. At the end of each round points are tallied for each team, the winner is declared by the team with the most points.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Wordplay: Use creativity to get your point across without speaking any of the taboo words. Take a second to think about each card you receive before you start saying clues. If a word has more than one meaning, try to get across as many of those meanings as possible to maximize your potential for winning. For example, if the word is crane, you can say it is a type of flying creature and a piece of construction equipment. Know your Teammates: Taboo is best played when people with a close relation, such as couples or best friends, are placed on opposing teams. However, there may be occasions when you can exploit a personal relationship with a teammate to quickly earn points by referencing inside jokes or shared experiences. Likewise, your clues should reflect what you know about your teammates. Do not make obscure references if you do not know your teammates well enough to guarantee that they will understand. Know When to Pass: When faced with a difficult card you must know when to play and when to pass. Every time you pass a card, the other team receives a point. However, passing is worth it if you can make up for the penalty. For example, if your team has guessed several cards in a row, you can afford to pass to keep the momentum going. Likewise, if you do not understand the word, your best strategy is to pass.\",\r\n      },\r\n      {\r\n        totalPicks: 3255,\r\n        gameTags: { tagOne: \"puzzle\", tagTwo: \"lengthy\", tagThree: \"family\" },\r\n        gameName: \"Clue\",\r\n        gameId: \"clueId\",\r\n        votedOnce:0,\r\n        photo: \"/assets/clue.jpeg\",\r\n        gameDescription:\r\n        \"The object of the game is to determine who murdered the game's victim, where the crime took place, and which weapon was used. Each player assumes the role of one of the six suspects and attempts to deduce the correct answer by strategically moving around a game board representing the rooms of a mansion and collecting clues about the circumstances of the murder from the other players.\",\r\n        gameRules:\r\n          \"Look on the board to see which suspect’s name is closest to you. Take the corresponding token of the suspect nearest you and place it onto the start square. Even if there are not six players, move the remaining suspect tokens onto the board. Take turns placing a weapon into a room of the mansion. Don’t place two weapons in the same room. Place the empty “Case File CONFIDENTIAL” envelope onto the “X” on the center of the board. Divide the deck of cards into three smaller piles—Weapons, Rooms, and Suspects. Place them face down onto the table. Take one card from each of the three piles (without looking at them) and place them into the “Case File CONFIDENTIAL” envelope. Shuffle the remaining cards together and deal them clockwise around the table, face down. Grab a Detectives Notepad. Use the notepad to write down clues throughout the game, but don’t let the other detectives see your notes, after all one of them could be the killer! Miss Scarlet always goes first. Play continues clockwise. If no player controls Miss Scarlet, choose another suspect to go first. You want to move to a different room in the mansion on every turn. Roll the die and move your token the corresponding number of spaces. You can change directions as often as you like, as long as you still have moves left on the roll, but you can’t cross over the same tile more than once on a single turn. Additionally, you may not land on a square occupied by another suspect. If you are in a room with a secret passage, you may move through the secret passage instead of rolling, simply announce your play at the beginning of your turn. Entering and Exiting a Room: There are special rules for entering and exiting rooms. First, once you pass from one room to another, you may not move further, even if you have moves left on your roll. Second, you cannot pass into a room that is blocked by another suspect token. It will sometimes happen that both the entrance and exit of a room are blocked, in which case, you can’t leave the room until someone moves on their turn. Further, you may not enter, and then re-enter a room on the same turn. Suggesting Suspects/Rooms/Weapons: When you enter a room, make a suggestion to help solve the murder. To make a suggestion, move a suspect token and a weapon token into a room on the board, and suggest that they committed the crime with that weapon in that room. You can only suggest that the murder occurred in the room you presently occupy. You can make suggestions about items/rooms/suspects in your hand. You may only make a suggestion upon entering a room, and can’t make multiple suggestions by entering/exiting a room on a single turn. You can’t forfeit a turn to remain in a room (so you could make another suggestion there next turn), but if you are blocked in a room by other tokens, you must stay in the room. If your token was moved into a room, you may either roll or make a suggestion for that room on your next turn (because you will have entered the room). You can make suggestions for suspect/weapons that are already in the room you occupy. There is no limit to the number of weapons and suspects that can be in a single room. Proving and Disproving Suggestions: Once you make a suggestion, your opponents attempt to prove the suggestion false, beginning with the player to your left. That player looks at their cards for one of the three cards that you just named, and if they have at least one of them, they must show you (and only you) the matching card of their choice. If the player on your left is unable to disprove your suggestion, the next player must attempt to do so. Once a player shows you a card that matches one in your suggestion, cross that card off of your detective notepad. Making an Accusation and Winning: When you think you’ve solved the mystery ,you can make an accusation. Unlike suggestions, you don’t have to be occupying a room to make an accusation that the crime occurred in there. You make an accusation by stating that you “accuse (suspect) of committing the crime in the (room) with the (weapon). You are allowed to make both a suggestion and an accusation on the same turn ,but keep in mind, if you are wrong on your accusation, you are unable to move further and cannot win the game (though you still try to disprove the other players suggestions). When you make your Accusation, look at the three cards in the envelope. If you are correct, you win the game. If you are incorrect, you cannot win the game. Note: If your token is in a door way and you make a false accusation, move it into the center of the room to free up the passage way.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Don't ask cards you know your opponents have: After you start by marking off all of your own cards, you want to learn about more cards you can mark off as soon as you can. If your opponents show you a card that you have already seen, then your it was a wasted turn. Note: You can suggest your own cards because nobody will be able to disprove them. Make new deductions based on known information: If you know that someone has the revolver card while you have the Mr. Green card and someone else shows a card to disprove the suggestion of Mr. Green, in the library with a revolver, then you know that card must be the library. Figure out what your opponents know: If an opponent repeatedly uses the same item in suggestions, it probably means nobody else can disprove that item. If someone has made three suggestions in a row about the rope, chances are high that the rope is either the murder weapon or in that opponent's hand. Spend your time in rooms: When you enter a room, make a suggestion. If someone suggests you and drags you to a new room, make a suggestion there on your next turn. Not only will this let you learn more about the weapons and people, but you can use the unfair summons trick. If another player is about to reach a good room to make a suggestion, you can make a suggestion about that player's character, which will drag their pawn back to your room. When that player takes his next turn to make a suggestion in your room, you can simply show your room card.\",\r\n      },\r\n      {\r\n        totalPicks: 3893,\r\n        gameTags: {\r\n          tagOne: \"strategy\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"quick\",\r\n        },\r\n        votedOnce:0,\r\n        gameName: \"Scrabble\",\r\n        gameId: \"scrabbleId\",\r\n        photo: \"/assets/scrabble.png\",\r\n        gameDescription:\r\n        \"A word game in which two to four players score points by placing tiles, each bearing a single letter, onto a game board divided into a 15Ã—15 grid of squares. The tiles must form words that, in crossword fashion, read left to right in rows or downward in columns, and be included in a standard dictionary or lexicon.\",\r\n        gameRules:\r\n          \"According to Scrabble rules, all tiles should be placed in a letter pouch or placed face down on the table beside the board. Ensure that letters are well mixed, and that players do not know which letter is in what spot. To determine who goes first, each player draws a letter – the player with the letter closest to “A” goes first. The ‘blank’ tile automatically goes first. Ensure you thoroughly remix the tiles before drawing letters. Each player draws 7 letters and places them on his or her letter rack. According to scrabble rules, there are three main steps to a turn: 1) Play a Word 2) Total the Score for that Word 3) Draw Tiles to Replace the Tiles Played The first player must play his or her first word on the center square of the board, the spot that has a ‘star’ on it. All words must be two or more letters long. Words are played either vertically or horizontally. Diagonal word play is not permitted. Play always moves clockwise (to the left). Each player must play off of words already present on the board. This may involve changing existing words (for example, making the word ‘play’ into ‘player’) or by incorporating a letter into the word you are playing. You may only place letters in a straight line horizontally or vertically. You can place letters in both directions on a single turn. The letters placed must form complete words. Anytime two or more letters touch, they must form valid, legal words. For example, if you add an ‘s’ to an existing word to make it a plural and then build a separate word from that ‘s’ in the opposite direction, you would get full credit for both words. No tile can be moved or shifted once it is played (baring a successful challenge). Whenever a word is played, other players may challenge the word if they do not believe it is a real word or it is spelled wrong. According to Scrabble rules, players should agree before the game begins on the dictionary they will use. All words in that dictionary that are labeled as parts of speech, including foreign origin, obsolete, and slang words, are permitted. The only words present in a dictionary that are not legal are as follows: abbreviations, prefixes and suffixes standing alone, words that require a hyphen or apostrophe, and words requiring capitalization. If you want to challenge an opponent’s word, you must challenge it before play moves on to the next player. If the challenged word is not legal, those tiles return to the player’s hand and that player loses the turn. If a word is challenged and it is legal, the challenger loses his or her next turn. If multiple words are made in a turn, all words are challenged when one word is challenged. If any of the words are not legal, all tiles are returned to their owner’s hand and that player loses his or her turn. The dictionary should only be consulted if a word is actually challenged, and should never be used before a word is played for verification purposes. One player should be elected as the score keeper. The scorekeeper should double-check the tally for each word. Each letter tile has the value of that letter. Unless the tile is on a Premium Letter Square, these should be counted at face value and totaled for the word. According to scrabble rules, there are two types of premium squares: Premium Letter and Premium Word Squares. A light blue square is a Premium Letter Square and it doubles the score of the letter placed on it. A dark blue square is a Premium Letter Square and it triples the score of the letter placed on it. A pink square is a Premium Word Square and if any letter from a word is placed on this square, the value of the entire word is doubled. A red square is a Premium Word Square and if any letter from a word is placed on this square, the value of the entire word is tripled. When calculating the value of a word that is on a Premium Word Square, Premium Letter Squares should be factored into the word total first. Premium squares only count on the first turn they are used on. If a subsequent turn uses a letter that was previously placed on a premium square, the tile on that square is only worth it’s face value. The only time a premium square is active for more than one word is if more than one word is created with a letter on a premium square on a single turn. Only use premium squares that are under tiles used in a given word when calculating point totals for each word created in a turn. For example, if you create ‘jobs’ and ‘cakes’ by adding the ‘S’ tile to the end of the existing word ‘job’, and the ‘K’ tile is on a red square, you would count ‘jobs’ for it’s face value (13) but you would triple the value of ‘cakes’ (30) and your total for the turn would be 43 points. According to scrabble rules, if a player is able to play all 7 tiles in a single turn, in addition to the score for that word, that player is awarded 50 points. When one player plays his or her last tile, and no more tiles are available to draw, the game is over per scrabble rules. Any remaining tiles should be subtracted from that player’s score. The player with the highest score wins the game. You may opt to allow each player one turn to attempt to play as many of his or her remaining tiles as possible.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"Points vs Leave: Sometimes making the most points in SCRABBLE isn't as important as what you leave on your rack. Think about the letters you're leaving behind. Are they high point tiles that don't combine well together, or are you close to being able to make a bingo? Sometimes, playing fewer letters in SCRABBLE can help you get the tiles you need to make the big play. And at other times, playing a longer word with a lower score gives you the opportunity to refresh your rack, drawing tiles that could breathe life back into your game. Parallels: Always look for plays parallel to words already on the SCRABBLE board. You get points for every word you form, so while a word played alone may have a low score, the bonus from the words formed in conjunction with the parallel word can significantly increase your score. Hooks: Hooks are the one letter that will spell a new word when added either before or after a word already on the SCRABBLE board. For example, turn LUSH into BLUSH, HOST into GHOST, and COME into COMET and watch your points add up. When to go back to the bag: Most casual SCRABBLE players don't ever exchange their tiles, but it can be to your benefit to refresh your rack. If you're consistently making low-scoring plays, you may consider exchanging your tiles. Make sure you look carefully at all the plays you could make before doing so. There might just be a hidden gem in a mix of letters that seem impossible. But a good rule to remember while playing SCRABBLE - leave as few high-point tiles in your rack as possible.\",\r\n      },\r\n      {\r\n        totalPicks: 3373,\r\n        gameTags: {\r\n          tagOne: \"family\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"lengthy\",\r\n        },\r\n        gameName: \"Yahtzee\",\r\n        gameId: \"yahtzeeId\",\r\n        votedOnce:0,\r\n        photo: \"/assets/yahtzee.jpg\",\r\n        gameDescription:\r\n        \"The objective of the game is to score points by rolling five dice to make certain combinations. The dice can be rolled up to three times in a turn to try to make various scoring combinations and dice must remain in the box. A game consists of thirteen rounds. After each round the player chooses which scoring category is to be used for that round. Once a category has been used in the game, it cannot be used again. The scoring categories have varying point values, some of which are fixed values and others for which the score depends on the value of the dice. A Yahtzee is five-of-a-kind and scores 50 points, the highest of any category. The winner is the player who scores the most points.\",\r\n        gameRules:\r\n          \"The object of Yahtzee is to obtain the highest score from throwing 5 dice. The game consists of 13 rounds. In each round, you roll the dice and then score the roll in one of 13 categories. You must score once in each category. The score is determined by a different rule for each category. The game ends once all 13 categories have been scored. To start with, roll all the dice. After rolling you can either score the current roll (see below), or re-roll any or all of the dice. You may only roll the dice a total of 3 times. After rolling 3 times you must choose a category to score. You may score the dice at any point in the round, i.e. it doesn't have to be after the 3rd roll. To score your combination of 5 dice, you click one of the 13 boxes, or write it on the scorecard (scoresheet). There are two sections to the score table - the Upper Section and the Lower Section. Once a box has been scored, it cannot be scored again for the rest of the game (except the Yahtzee category), so choose wisely. If you score in the upper section of the table, your score is the total of the specified die face. So if you roll: 5 - 2 - 5 - 6 - 5 and score in the Fives category, your total for the category would be 15, because there are three fives, which are added together. If the One, Three or Four Categories were selected for scoring with this roll, you would score a zero. If placed in the Two or Six category, you would score 2 and 6 respectively. Bonus If the total of Upper scores is 63 or more, add a bonus of 35. Note that 63 is the total of three each of 1s, 2s, 3s, 4s, 5s and 6s. In the lower scores, you score either a set amount, or zero if you don't satisfy the category requirements. 3 & 4 of a kind: For 3 of a kind you must have at least 3 of the same die faces. You score the total of all the dice. For 4 of a kind you would need 4 die faces the same. Small & Large Straight: A Straight is a sequence of consecutive die faces, where a small straight is 4 consecutive faces, and a large straight 5 consecutive faces. Small straights score 30 and a large 40 points. So if you rolled: 2 - 3 - 2 - 5 - 4 you could score 30 in small straight or 0 in large straight. Full House: A Full House is where you have 3 of a kind and 2 of a kind. Full houses score 25 points. i.e.: 3 - 3 - 2 - 3 - 2 would score 25 in the Full House category. First Yahtzee: A Yahtzee is 5 of a kind and scores 50 points, although you may elect NOT to score it as a yahtzee, instead choosing to take it as a top row score and safegaurd you bonus. Additional Yahtzees: If you roll a second Yahtzee in a game, and you scored your first yahtzee in the Yahtzee box, you would score a further bonus 100 points in the yahtzee box. You must also put this roll into another category, as follows; -If the corresponding Upper section category is not filled then you must score there. ie if you rolled 4 - 4 - 4 - 4 - 4 and the Fours Category is not filled, you must put the score in the Fours category. -If the corresponding Upper section category is filled you may then put the score anywhere on the Upper Section (scoring zero). In 3 of a Kind, 4 of a Kind, and Chance categories you would score the total of the die faces. For the Small Straight, Large Straight, and Full House categories, you would score 30, 40 and 25 points respectively. Chance You can roll anything and be able to put it in the Chance category. You score the total of the die faces. Dump Scores: You can score any roll in any category at any time, even if the resulting score is zero. Eg, you can take 2-3-3-4-6 in the 5's category. It will score 0. This could be used near the end of a game to lose a poor roll against a difficult-to-get category that you've failed to fill (eg, long straight or yahtzee).\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"1. Aim for the 35 bonus by filling the upper section with at least 63 points near the beginning of the game. For this, concentrate on obtaining as many fives and sixes as possible. 2. Never use 1's or 2's to score a 3 or 4 of a kind because they don't offer many points. Keep them for the 1's and 2's boxes or else for getting a full house. 3. If you roll four of a kind with 4's, 5's, or 6's, then choose to score points in the upper section because it will help you to get the 35 points bonus. 4. On average, you score a Yahtzee every 22 rolls. So, every time you have easonable shot at a Yahtzee, you should take it. And also when you already scored one because a second Yathzee will give you 100 bonus points. 5. Avoid using chance if your score is lower than 25. An exception is when you will loose bonus points if you don't go for chance.\",\r\n      },\r\n      {\r\n        totalPicks: 4546,\r\n        gameTags: {\r\n          tagOne: \"competition\",\r\n          tagTwo: \"strategy\",\r\n          tagThree: \"family\",\r\n        },\r\n        gameName: \"Monopoly\",\r\n        gameId: \"monopolyId\",\r\n        votedOnce:0,\r\n        photo: \"/assets/monopoly.png\",\r\n        gameDescription:\r\n        \"In the game, players roll two six-sided dice to move around the game board, buying and trading properties, and developing them with houses and hotels. Players collect rent from their opponents, with the goal being to drive them into bankruptcy. Money can also be gained or lost through Chance and Community Chest cards, and tax squares; players can end up in jail, which they cannot move from until they have met one of several conditions.\",\r\n        gameRules:\r\n          \"Each player chooses a token and places it on ‘Go’, and is provided with $1500 as follows: 2 of each $500’s, $100’s, and $50’s; 6 $20’s; and 5 of each $10’s, $5’s, and $1’s. One player is the Banker. All assets of the Bank should be separate from the Banker’s own assets. The Bank controls all remaining money and all properties and buildings until they are purchased. The Bank can never ‘go broke’ – more money should be made if needed. According to the rules of Monopoly, the player that roles the highest total on both dice goes first. Game play proceeds clockwise from that player. There are 4 main parts to a turn. 1) Roll the dice. Move the number of squares indicated. If you throw doubles, you take another turn after your turn is completed. Each time you pass ‘Go’, collect $200 from the Bank. 2) Buy properties. You may buy any property from the Bank that you land on if it is not already owned. If you do not purchase the property, the Banker auctions the property to the highest bidder. Some people chose not to use auctions, only allowing properties to be purchased as they are landed on. 3) Building. You may only build when you own all properties in a color group. Building must be equal on all properties in a group. You may place a single building on a single property, but you may not place two buildings on one property unless all other properties in the group have one building present (even build rule). Any property can have a total of 4 houses, except Utilities and Railroads, which cannot be devloped. To place a hotel on a property, 4 houses must be present on all properties in the group. Houses are removed from the property when a hotel is placed. All buildings are purchased from the Bank. 4) Complete necessary actions. Pay rent as determined by the Title Deed for the property you are on. Pay Income Tax to the Bank ($200 or 10% of your total assets). Draw a Community Chest or Chance card and follow the instructions. These cards are returned to the bottom of the pile when the action is completed. In the rules of Monopoly, there are 3 ways to be sent to ‘Jail’: 1) Land on a space marked ‘Go to Jail’ 2) Draw a card marked ‘Go to Jail’ 3) Roll doubles three times in a row There are 4 ways to get out of ‘Jail’ 1) Pay the $50 fine before rolling the dice 2) Use a ‘Get Out Of Jail Free Card’ before rolling the dice 3) Roll doubles 4) After the 3rd failed attempt to roll doubles, you must pay the $50 fine and leave jail When you get out of ‘Jail’, move the number of spaces indicated by the dice. Even while in ‘Jail’, you may buy and sell property and collect any rent owed to you. You are not sent to ‘Jail’ if you land on the ‘Jail’ square during normal game play, and you do not incur a fine. The rules of Monopoly state, if you do not have enough money to pay Rent or other obligations during your turn, you may chose to sell houses, hotels, or property. Buildings may be sold to the Bank for one-half of the purchase price. Buildings may not be sold to other players. Unimproved properties (including railroad and utilities) can be sold to any player for any amount. Unimproved properties can also be mortgaged to the Bank for the value mortgage value printed on the Title Deed. No rent is collected on mortgaged properties. To lift a mortgage, the player must pay the Bank the mortgage amount plus 10% interest. Players retain possession of mortgaged properties. If that player chooses, he or she may sell the mortgaged property to another player for any price. The property would remain mortgaged, and the new owner would have to pay the Bank the same mortgage + 10% to lift the mortgage. You may chose to end the game at any time and tally the total worth of each player (including buildings and all property worth). You may also chose to play until all but one player has been declared Bankrupt. Bankruptcy occurs when a player owes more than he or she can pay. You must turn over all that you have including money and Title Deeds to the Bank or another player, depending on who the current debt is owed to. Any player who has declared Bankruptcy is no longer part of the game. According to the rules of Monopoly, the last player in the game, or the player with the most money, wins.\",\r\n        userGameVote: 0,\r\n        addedBy: \"Manogya\",\r\n        gameStrategy:\r\n          \"Losing is not an option: Lesson number one is banishing any fears of losing. Block out thoughts like: if I land on his hotel, I'll still have this much money left, or please no six, no six, no six. Your opponents will smell your fear; playing out your worst fears serves no purpose at all. Keep the cash flowing: The first phase of the game is the most important. Buy everything you can. It'll give you a better bargaining position later during any negotiation rounds. Don't turn up your nose at the small fry: Too many amateurs make the mistake of focusing exclusively on the most expensive streets, sitting on their cash until they get the chance to buy Boardwalk. Never do this, by which I mean never! Attaining a monopoly is much more lucrative than buying expensive property on which you can no longer afford to build. Think small to generate a sustainable cash flow. Donald Trump didn't start his career by building Trump Tower, did he? Later in the game, a few long stretches in jail won't hurt: The more property that's been bought up by other players, the more attractive it'll be to stay in jail. Earlier in the game, it's in your best interest to pay the bail as soon as possible so you can join the fray in snapping up as much property as you can. Later on, however, you'd be wise to stay in jail as long as you can get away with it. After three rounds you'll be released anyway. See these three rounds as free accommodation, unless you're unlucky enough to roll a double. Build three houses on each street as soon as possible: The rent you'll receive if you develop your streets by building three houses on them is relatively higher than if you build one, two or four houses. And only develop to a fourth house or hotel if all your streets have three houses. There is an additional benefit to this strategy. The more houses you buy, the less there will be left for your opponents to buy. If you own 18 houses it means there will only be 14 left for your opponents to chase. The bank cannot sell any houses if there are none left. Monopoly is not so much about the amount of money you have, as the opportunities you can deprive your opponents of. Buy everything that's seven squares from your opponents: During a game of Monopoly, the highest odds are on you throwing a seven, unless you are throwing with just one dice, of course. So always keep an eye on what your opponents occupy on the board and buy or invest in anything that's seven squares away. You can always choose to sell it later on in the game.\",\r\n      },\r\n      {\r\n        totalPicks: 8621,\r\n        gameTags: {\r\n          tagOne: \"quick\",\r\n          tagTwo: \"strategy\",\r\n          tagThree: \"competition\",\r\n        },\r\n        gameName: \"Secret Hitler\",\r\n        gameId: \"secrethitlerId\",\r\n        votedOnce:0,\r\n        photo: \"/assets/secrethitler.jpg\",\r\n        gameDescription:\r\n        \"Players assume the roles of liberals and fascists in the Reichstag of the Weimar Republic, with one player becoming Hitler. To win the game, both parties are set to competitively enact liberal and fascist policies, respectively, or complete a secondary objective directly involving Hitler.\",\r\n        gameRules:\r\n          \"Distribute players to their parties: note: 1 fascist will be Hitler, and liberals always start with an advantage. 5 players = 3 liberals, 2 fascist. 6 players = 4/2 7 players = 4/3 8 players = 5/3 9 players = 5/4 10 players = 6/4 Select the fascist track that corresponds to the correct number of players and it next to a liberal track. Shuffle all (11) fascist tiles and the (6) liberal tiles together in a single policy deck, placed face down on the draw pile. Prepare an envelope for each player where the contents of each envelope should include a secret role, party membership, and one of each Nein and Ja ballot cards. Liberal or fascist secret roles must always be packaged together with their appropriate (liberal or fascist) membership cards. Shuffle the envelopes and distribute to players at random. Players should keep their secret role and party membership from prying eyes. Randomly select a president candidate using whatever rules you determine to be fair. Give that player both the chancellor and president placard. In games of 5-6 players everybody is blind (close eyes). Fascist and Hitler can open their eyes and acknowledge each other. Then close their eyes again and everyone then opens their eyes. This allows the fascist to know each other while keeping them hidden from the liberals. In a game of 7 to 10 players then everyone is blinded again, but extend a fist out in front of them. all fascist who are not Hitler will open their eyes and acknowledge each other. Hitler must keep his eyes closed, but will form a thumbs up instead of a fist. This allows the fascist to know who Hitler is and each other, but not Hitler to know the fascists. After a short delay, everyone should return to their eyes closed and put their hands away. Once that is done, everyone can open their eyes and the game can start. If there was any confusion about this, it should be dealt with now. The underlining idea is that the fascists know each other and the liberals know nothing. In large games, Hitler is also unaware of who the fascists are. Each round or turn in the game consists of 3 stages. The first stage is the election to form the government. The second stage is a legislative session to enact policy. The third stage is executive action. This concludes the turn. New turns start until the game is over. First stage Election: Pass the presidency. At the start of the round, the President placard moves clockwise to the next player. This player is now the presidential candidate. Nominate a Chancellor: the presidential candidate chooses a chancellor by passing the placard to any other eligible player. The candidate is encouraged to get consensus from the other players in their selection to make it more likely the election succeeds. Eligibility: players that were the chancellor or president in previous round are considered “term-limited” and cannot be nominated as Chancellor. This applies to those that were elected only, nominations do not count towards term-limit and ONLY applies to Chancellor. Anyone can be president. SPECIAL NOTE: If there are 5 or fewer players remaining in the game, then the last elected president may be nominated as chancellor. Vote: once both president and chancellor candidates have been chosen the players must now vote. Discussions are encouraged prior to the vote. Every player votes (including candidates) by placing their appropriate Ja(yes) or Nein (no) cards in front of them face down. Once the votes are ready to be counted, every player will reveal their vote at the same time. If a tie or a no vote occurs, then the candidacy is moved to the next player and the election tracker is advanced by one. Election tracker is used to count up to 3 failed votes in a row. If this occurs then the country is “thrown into chaos” and the policy at the top of the deck is immediately enacted, forgoing any powers it might grant to the president. All term limits are reset and the election counter is placed back at 0. Election counter is automatically reset any time a new policy is enacted. If the vote is yes, then the game proceeds as normal with the new president and chancellor. Second stage Legislative session: President will draw the top 3 tiles from the policy deck, keeps their contents to themselves, discards one policy tile face down into discard pile, sends the remaining two off to the chancellor who then discards another policy tile face down (nobody can see) into the discard pile and enacts the last one, face up, on the correct track. Communication of any kind between the president and chancellor is forbidden and they may not choose a policy at random nor can they perform any action that would require them to select one at random. The president should hand over both policy tiles at the same time. Using any method (clever or otherwise) to circumvent this rule is against the spirit of the game and considered cheating. Discarded policies cannot be revealed, but the President or Chancellor may say whatever they want (including false information) about what they threw away. If fewer than 3 tiles are left in the policy deck at the end of a legislative session, then shuffle the discard pile back into the draw to create a new draw pile. If a fascist policy is enacted that gives new power to the president, then that power must be used that same turn by the sitting president. Presidential powers are only used once. Liberal policies simply end the turn and start a new round of elections. Stage three Executive action: in the event that a fascist policy gives the president a new power, it must be used that same turn and will only be used in the turn that it is played (powers do not roll over into other turns). The president may discuss with the other players what to do with the power, but ultimately the decision lies with the president. Presidential powers: Investigate Loyalty – the president chooses a player and that player must reveal (only) their membership card to (only) the president. Do not reveal your secret role. The president is free to do what he will with this information (without the proof of the card, of course), and as always, players are free to lie about what they know. Special Election – the player chooses any other player to be the presidential candidate. This bypasses term limits for the president, but not for chancellor. Elections proceed as normal afterward. This action does not actually skip players, the “normal rotation” will continue where it left off prior to the special election. If the player selects the next candidate for a special election, then that player would run for president for the current special election, and then again on the next turn during the normal rotation. Policy Peek – the president looks at the top 3 policies, then returns them without changing their order. Execution – the president executes one player by name, that player is removed from the game. If Hitler was executed, then the game is over with a liberal victory. If that player was not Hitler then nothing is revealed and players are expected to guess rather or not a liberal or fascist was executed. The removed player is not allowed to influence the game in any way. Veto power – this is a special rule that comes into play once five fascist policies have been enacted. This gives the executive branch a permanent new ability to discard all three policies tiles if both the Chancellor and President agree. For a veto to happen the president passes 2 policy tiles to the chancellor as normal, at which point the chancellor may announce that they wish to “veto this agenda” if the president consents then the remaining two policies are discarded and the turn ends. Every veto represents an inactive government and increases the “election tracker” by one. Liberals will win the game if five liberal policies are enacted or if Hitler is assassinated. Fascists will win the game if six fascist policies are enacted or if Hitler becomes chancellor at any time after the third fascist policy is enacted.\",\r\n        userGameVote: 0,\r\n        addedBy: \"Manogya\",\r\n        gameStrategy:\r\n          \"1. Everyone should claim to be a liberal. Since the Liberal team has a voting majority, it can easily shut out anyone who reveals he is a fascist. Liberals who claim to be fascists put their team at a significant disadvantage. 2. Slow the game down and discuss every decision. Consider what powers the president will gain if a fascist law is enacted, and ask potential presidents how they'll use their powers. Liberals generally want to slow the game down to a crawl and think about every vote and decision. Fascists generally want to blow through the game and hope that the group makes sloppy mistakes. 3. Pay careful attention to the position of players around the table and who's going to be President next; you don't want to be forced into a situation where you have to vote for a fascist ticket. The special election Presidential power is very powerful - make sure it doesn't fall into the wrong hands! 4. After the third Fascist policy has been enacted, the Fascists are poised to win the game by getting Hitler elected Chancellor. This is a very dangerous stage of the game for the Liberal team - the only way to know definitively if a player is Hitler is to elect them Chancellor and see if the game ends. 5. If a Fascist is president when the kill power is activated, he can eliminate a Lberal player under the guise of confusion. The Fascists can win the game this way by gaining a voting majority and installing Hitler as Chancellor, or by rejecting Candidates until the board fills with fascist policies.\",\r\n      },\r\n      {\r\n        totalPicks: 6398,\r\n        gameTags: {\r\n          tagOne: \"strategy\",\r\n          tagTwo: \"competition\",\r\n          tagThree: \"lengthy\",\r\n        },\r\n        gameName: \"Risk\",\r\n        gameId: \"riskId\",\r\n        votedOnce:0,\r\n        photo: \"/assets/risk.png\",\r\n        gameDescription:\r\n        \"Turn rotates among players who control armies of playing pieces with which they attempt to capture territories from other players, with results determined by dice rolls. Players may form and dissolve alliances during the course of the game. The goal of the game is to occupy every territory on the board and in doing so, eliminate the other players.\",\r\n        gameRules:\r\n          \"Each player takes one of the colored token sets to represent their army, with various pieces representing different denominations of troops. Infantry = 1 Cavalry = 5 Cannons = 10 Each player counts out a specific number of troops to prepare to deploy to the game board, the number of troops each player counts out is dependent on the number of players in the game: 2 players = (additional rules apply, see special notes) 3 players = 35 4 players = 30 5 players = 25 6 players = 20 Each player rolls a die, with the highest number going first. The high-roller places one infantry from his pre-counted pile onto a territory on the game board, thus claiming that territory. The player to the left then places a unit an unclaimed territory. This process continues until all 42 territories are claimed. Once all 42 territories are claimed, each player may then place one infantry on one of their own territories to reinforce it. Each player places one infantry in a continuation of the order established while claiming territory. Risk cards are shuffled and then placed face down where every player can reach them. Game play starts with the player who placed the first army. Mission cards are used for a special game mode and should be separated from the Risk cards and set aside for normal play. Each turn consists of three parts: placing armies, attacking, and one free move at the end of your turn. Placing Armies – At the beginning of your turn, count the total number of territories you own and divide by three. This is the number of additional armies you will receive for territory (ignoring fractions). If the number of territories divided by three is less than three, you receive three armies instead. Add the value of any continents you fully control, and play bonus cards if you need or want to and add them to this total to give you the number of troops you receive this turn (troops must be placed in the turn they are received). Bonus cards may only be played in sets at the beginning of your turn or as drawn if you have more than five in your hand. Sets include one of each card type (infantry, cannon, cavalry), or three of the same kind. Wild cards may be used to form set or variety turn ins (infantry, cannon, cavalry). If you own a territory that is shown on the card set you turn in, you also receive an immediate two free infantry placed on that territory. Set turn-in values are based on the number of sets that have been turned in during the game: First set – 4 Second set – 6 Third set – 8 Fourth set – 10 Fifth set – 12 Sixth set – 15 After the sixth set, each set afterwards is worth an additional 5 more from the previous total. After placing your armies you may declare attacks. You may only attack territories adjacent to your own where your territory contains two or more armies. You may attack with any number of armies except for one, which must remain to defend your territory. Combat: Defenders use up to two white dice to defend against up to three attacking red dice. Attackers declare up to three troops to use on their attack with each troop represented by a die. Defenders use two dice if they have two or more troops, but only one die if they have a single troop. Attackers roll first, defenders roll second. The two highest die in both rolls are used, with the highest of each roll being matched against the highest of the other roll. Ties go to the defender with each losing roll defeating 1 troop. Rounds continue until all defenders are defeated, the attacker runs out of troops they can attack with, or the attacker decides to withdraw. Example: Attacker rolls 3, 2, 5 Defender Rolls 2, 5 Result = 5 against 5 goes to the defender. 2 Against 3 goes to the attacker. Each player loses 1 troop. Attacker rolls 4, 6, 5 Defender Rolls 5, 4 = 5 goes against 6 goes to attacker. 4 against 5 goes to attacker. Defender loses two troops. Atacker rolls 3, 3, 5, Defender rolls 6, 3 = 6 goes against 5 goes to attacker. 3 goes against 3 tie goes to defender. Attacker loses two troops. At the end of your turn you may reinforce one territory that you own from another adjacent territory that you own. You may make this move once per turn, and you may move as many troops as you want as long as you leave at least one behind. Elimination: If an opponent eliminates you by taking your last territory then you must forfeit all of your Risk cards to that player. If that player then holds more than 6 cards because of this action, they must immediately play a risk set/sets until they hold 4 or fewer cards and place the armies and then continue their attack phase. Victory: A player wins the game by conquering all 42 territories.\",\r\n        userGameVote: 0,\r\n        addedBy: \"admin\",\r\n        gameStrategy:\r\n          \"1. Controlling an entire continent gives you the continent bonus but also know that this makes you an attractive target for other players. 2. Do not conquer an entire continent unless you know you can hold it for at least a full turn. 3. You should try to get a card every turn. Therefore you must invade at least one territory to take a card at the end of a turn. If you don't have an immediate agenda, attack a territory that's undefended with armies or maximum one or two armies. Avoid big losses. 4. To defend a country, you can have an option of how many dice to roll, then roll as many as possible because this increases your chances of defense. 5. It is often better to attack first then waiting for the enemy to build up more troops and attack when he has the advantage.\",\r\n      },\r\n    ],\r\n  };","import React from \"react\";\r\nimport data from \"../utils/initialData.js\";\r\nimport css from \"./Search.module.css\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction Search() {\r\n\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n  const [searchResults, setSearchResults] = React.useState([]);\r\n  const handleChange = e => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  let games = data.games.map((game)=>game.gameName);\r\n\r\n  React.useEffect(() => {\r\n    const results = games.filter(game =>\r\n      game.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    if (searchTerm.length !== 0){\r\n      setSearchResults(results);\r\n    }\r\n    else{setSearchResults([])}\r\n    \r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <div className={css.searchbar}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search for a game!\"\r\n        value={searchTerm}\r\n        onChange={handleChange}\r\n      />\r\n      <ul className={css.results}>\r\n        {searchResults.map(item => (\r\n           <Link to={\"/game/\".concat(item.toLowerCase().concat(\"Id\")) }><a >{item}</a></Link>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search;","  \r\nfunction sleep(milliseconds) {\r\n\tvar start = new Date().getTime();\r\n\tfor (var i = 0; i < 1e7; i++) {\r\n\t\tif ((new Date().getTime() - start) > milliseconds){\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default (prefix) => { // TODO use shortid \r\n\tlet id = new Date().valueOf().toString(36);\r\n\tsleep(1);// wait for one millisecond\r\n\treturn (prefix ? prefix + id\t: id);\r\n};","import React, {createContext, useState, useEffect} from 'react';\r\nimport initialData from '../utils/initialData.js';\r\nimport uniqueId from '../utils/uniqueId'\r\n\r\n\r\nfunction DataContextProvider(props){\r\n    const [data, setData] = useState(()=>{\r\n        return JSON.parse(window.localStorage.getItem('data')) || initialData;\r\n    });\r\n    useEffect(()=>{\r\n        window.localStorage.setItem('data', JSON.stringify(data));\r\n    }, [data]);\r\n\r\n\r\n    function addVote(gameId) {\r\n        setData({\r\n          ...data,\r\n          userGameVote: (data.games.find(\r\n            (a) => a.gameId === gameId\r\n          ).userGameVote += 1),\r\n          totalPicks: (data.games.find(\r\n            (a) => a.gameId === gameId\r\n          ).totalPicks += 1),\r\n        });\r\n        console.log(data.games.find((a) => a.gameId === gameId).userGameVote);\r\n      }\r\n\r\n      function removeVote(gameId) {\r\n        setData({\r\n          ...data,\r\n          userGameVote: (data.games.find(\r\n            (a) => a.gameId === gameId\r\n          ).userGameVote -= 1),\r\n          totalPicks: (data.games.find(\r\n            (a) => a.gameId === gameId\r\n          ).totalPicks -= 1),\r\n        });\r\n        console.log(data.games.find((a) => a.gameId === gameId).userGameVote);\r\n      }\r\n\r\n      function addGame(name, t1,t2,t3,im,gd, gr, level, xp, userId){\r\n        const newgame = {\r\n          totalPicks: 1,\r\n          gameTags:{tagOne:t1, tagTwo:t2, tagThree:t3},\r\n          gameName: name,\r\n          gameId: uniqueId('game'),\r\n          photo: im,\r\n          gameDescription:gd,\r\n          gameRules:gr,\r\n          userGameVote: 1\r\n        }\r\n        if(xp <= 0){\r\n          level += 1;\r\n          xp += (50);\r\n        }\r\n              \r\n\r\n        setData({\r\n          ...data,\r\n          xp: (data.users.find(\r\n            (a) => a.id === userId\r\n          ).xp = xp),\r\n          level: (data.users.find(\r\n            (a) => a.id === userId\r\n          ).level = level),\r\n          games: data.games.concat(newgame),\r\n        });\r\n        \r\n\r\n      }\r\n\r\n      function addXPGame(level, xp, gameId, userId){\r\n        if(xp <= 0){\r\n          level += 1;\r\n          xp += (50);\r\n        }\r\n        setData({\r\n          ...data,\r\n          xp: (data.users.find(\r\n            (a) => a.id === userId\r\n          ).xp = xp),\r\n          level: (data.users.find(\r\n            (a) => a.id === userId\r\n          ).level = level),\r\n          votedOnce: (data.games.find(\r\n            (a) => a.gameId === gameId\r\n          ).votedOnce += 1),\r\n        });\r\n      }\r\n\r\n\r\n    return(\r\n        <DataContext.Provider value = {{...data, addVote, removeVote, addGame, addXPGame}}>\r\n            {props.children}\r\n        </DataContext.Provider>\r\n    )\r\n}\r\nexport default DataContextProvider; // export this component as default\r\n// export the context so that other components can import\r\nexport const DataContext = createContext();","import React, { useContext, useState, useEffect } from \"react\"; //\r\nimport css from \"./XP.module.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport publicUrl from \"../utils/publicUrl.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataContext } from \"../contexts/DataContext.js\";\r\nimport initialData from \"../utils/initialData\";\r\n\r\nfunction Xp(){\r\n    let {users, currentUserId} = useContext(DataContext);\r\n\r\n    let now = users.find((a)=>a.id === currentUserId);\r\n    return(\r\n        <div className={css.mastercontainer}>\r\n            <div>\r\n                Level: {now.level}\r\n                {console.log(now.level)}\r\n            </div>\r\n            <div>\r\n                {now.xp} XP to LVL Up\r\n                {console.log(now.xp)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Xp;","import React, { useContext } from 'react';\r\nimport css from './NavBar.module.css';\r\nimport publicUrl from '../utils/publicUrl.js';\r\nimport Search from './Search.js';\r\nimport Xp from './XP.js';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {DataContext} from '../contexts/DataContext.js';\r\n\r\n\r\nfunction NavBar(){\r\n    let {\r\n        currentUserId, users\r\n    } = useContext(DataContext);\r\n    let stringTo = \"/\".concat(currentUserId);\r\n    return(\r\n        <div className={css.header}>\r\n            <nav className={css.navbar}>\r\n            <div className={css.logo}>\r\n                \r\n                <Link to=\"/\">\r\n                <img width=\"65\" height=\"65\" src={publicUrl('/assets/logo.png')}></img> <p>CardBored</p>\r\n                </Link>\r\n            </div>\r\n            <ul className={css.mainNav}>\r\n                <li className={css.navItem}>\r\n                <Link to=\"/allgames\">\r\n                    <a>All Games</a>\r\n                </Link>\r\n                </li>\r\n                <li className={css.navItem}>\r\n                <Link to=\"/addgame\">\r\n                    <a>Add Game</a>\r\n                </Link>    \r\n                </li>\r\n                <li className={css.bar}>\r\n                    <Search/>\r\n                </li>\r\n                \r\n               \r\n            </ul>\r\n    \r\n            <div className={css.profileSettings}>\r\n                    <div className={css.xp}>\r\n                        <Xp/> \r\n                    </div>\r\n                <div className={css.profile}>\r\n                        <Link to=\"/profile\">\r\n                            <a>{users[0].name}</a>\r\n                            <img width=\"45\" height=\"45\" src={publicUrl('/assets/unnamed.png')}></img>\r\n                        </Link>\r\n                </div>\r\n            <div className={css.gear}> \r\n                        <img src={publicUrl('/assets/settings.svg')} alt=\"Settings\"/>\r\n                        <GearSubmenu className={css.submenu}/>\r\n            </div>\r\n            </div>  \r\n            \r\n            </nav> \r\n        </div>\r\n        )\r\n    }\r\n\r\n    function GearSubmenu(){\r\n        return(\r\n            <ul className={css.submenu}>\r\n                <li className={css.submenuitem}>\r\n                <Link to=\"/about\">\r\n                    <a>About Us</a>\r\n                </Link>\r\n                </li>\r\n            <li className={css.submenuitem}>\r\n                <Link to=\"/feedback\">\r\n                    <a>Give Us Feedback</a>\r\n                </Link>\r\n                   \r\n            </li>\r\n            <li className={css.submenuitem}>\r\n                    <a>Log Out</a>\r\n            </li>\r\n    \r\n    \r\n    \r\n            </ul>\r\n        );\r\n    }\r\n\r\nexport{ NavBar,\r\n        GearSubmenu,}","import React, { useContext } from 'react';\r\nimport css from './MainPage.module.css'\r\nimport publicUrl from '../utils/publicUrl.js'\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {DataContext} from '../contexts/DataContext.js';\r\nimport Xp from './XP';\r\n\r\nfunction MainPage(){\r\n    let {\r\n        currentUserId, games, about\r\n    } = useContext(DataContext);\r\n\r\n    let sorted_games = [...games].sort((a,b)=>(a.totalPicks < b.totalPicks)?1:-1);\r\n    console.log(sorted_games);\r\n    let number_one = sorted_games[0];\r\n    let number_two = sorted_games[1];\r\n    let number_three = sorted_games[2];\r\n    let path_one = \"./game/\".concat(sorted_games[0].gameId);\r\n    let path_two = \"./game/\".concat(sorted_games[1].gameId);\r\n    let path_three = \"./game/\".concat(sorted_games[2].gameId);\r\n\r\n    console.log(randomNumber());\r\n    function randomNumber(){\r\n        console.log(games.length)\r\n        return Math.floor(Math.random() * ((games.length-1) - 0 + 1));\r\n    }\r\n\r\n    let randomGame = games[randomNumber()];\r\n\r\n    return(\r\n        <div className={css.pageborder}>\r\n            <div className={css.row1}>\r\n                {/* <div className={css.col4}>\r\n\r\n                </div>\r\n                <div className={css.col8}> */}\r\n                    <img width=\"100%\"src={publicUrl('/assets/redblack2.jpg')}></img>\r\n                        {/* <h1>CardBored</h1>   */}\r\n\r\n                {/* </div> */}\r\n                    {/* <div className={css.top}> */}\r\n                        {/* <h1>CardBored</h1>  \r\n                        <p color=\"black\">Learn • Strategize • Invent</p> */}\r\n                    {/* </div> */}\r\n            </div>\r\n            <div className={css.top}>\r\n                <h1>Features</h1>\r\n                <img className={css.trophy} height=\"80\" width=\"80\" src=\"./assets/trophy.png\"></img>\r\n            </div>\r\n            <div className={css.row}>\r\n                <div className={css.col4}>\r\n                    Learn and Strategize\r\n                    Your Favorite Games\r\n                </div>\r\n                <div className={css.col4}>\r\n                    Upload Your Game Ideas\r\n                </div>\r\n                <div className={css.col4}>\r\n                    Vote on Your Favorite Games\r\n                </div>\r\n            </div>\r\n            <br></br>\r\n            <div className={css.top}>\r\n                <h1>What's Hot?</h1>\r\n                <img height=\"80\" width=\"80\" src=\"./assets/whatshot.png\"></img>\r\n            </div>\r\n\r\n\r\n            \r\n\r\n            <div className={css.row}>\r\n                <div className={css.col6}>\r\n                    <div className={css.topthree}>\r\n                        <Link to={path_one} className={css.three}>{number_one.gameName} <img height=\"60\" width=\"60\" src={\".\".concat(number_one.photo)}></img></Link>\r\n                    </div>\r\n                    <div className={css.topthree}>\r\n                        <Link to={path_two} className={css.three}>{number_two.gameName}<img height=\"60\" width=\"60\" src={\".\".concat(number_two.photo)}></img></Link>\r\n                    </div>\r\n                    <div className={css.topthree}>\r\n                        <Link to={path_three} className={css.three}>{number_three.gameName}<img height=\"60\" width=\"60\" src={\".\".concat(number_three.photo)}></img></Link>\r\n                    </div>\r\n                </div>\r\n                <div className={css.col3}>\r\n                    <div className={css.white}>\r\n                    <h3>Click me to redirect to a random game!</h3>\r\n                    </div>\r\n                    <div className={css.dice}>\r\n                        <Link to={\"./game/\"+randomGame.gameId}>\r\n                            <img width=\"250\" height=\"250\" className={css.dicemove} src={publicUrl('/assets/dice.png')}></img>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Xp/>\r\n            </div>\r\n            <div className={css.row}>\r\n                <br></br>\r\n                <br></br>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default MainPage;","import React, { useContext } from 'react';\r\nimport css from './AllGames.module.css'\r\nimport publicUrl from '../utils/publicUrl.js'\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {DataContext} from '../contexts/DataContext.js'\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction AllGames(){\r\n    let {\r\n        currentUserId, games\r\n    } = useContext(DataContext);\r\n\r\n    renderGames(games);\r\n\r\n    function renderGames(list){\r\n        return(\r\n            <div>\r\n                <div className={css.main}>\r\n                    All Games:\r\n                </div>\r\n                <div>\r\n                    {list.map(game=>{\r\n                    return(\r\n                        <div>\r\n                        <div className={css.game}>\r\n                            <div className={css.name}>\r\n                                <div className={css.row2}>\r\n                                    <div className={css.col10}>\r\n                                        <Link to={\"./game/\".concat(game.gameId)} className={css.nameofgame}>{game.gameName}</Link>\r\n                                    </div>\r\n                                    <div className={css.totalvotes}>\r\n                                        {game.totalPicks} Votes\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                                \r\n                                \r\n                                <div className={css.row2}>\r\n                                    <div className={css.col2}>\r\n                                        Categories:\r\n                                    </div>\r\n                                    \r\n                                    <div className={css.col2}>\r\n                                        <div className={css.categories}>\r\n                                            {game.gameTags.tagOne}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={css.col2}>\r\n                                        <div className={css.categories}>\r\n                                            {game.gameTags.tagTwo}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={css.col2}>\r\n                                        <div className={css.categories}>\r\n                                            {game.gameTags.tagThree}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </div>\r\n            \r\n            \r\n        )\r\n        \r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n            {renderGames(games)}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default AllGames;","import React, {useContext } from 'react';\r\nimport {DataContext} from '../contexts/DataContext.js';\r\nimport publicUrl from '../utils/publicUrl.js';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport css from './About.module.css';\r\n\r\nfunction About(){\r\n\r\n    let {currentUserId, users, about, games} = useContext(DataContext);\r\n    console.log(currentUserId);\r\n\r\n    let managers = users.map(people=>{\r\n        console.log(people.id);\r\n    })\r\n    console.log(managers);\r\n\r\n    let sorted_games = [...games].sort((a,b)=>(a.totalPicks < b.totalPicks)?1:-1);\r\n    console.log(sorted_games);\r\n    let number_one = sorted_games[0];\r\n    let number_two = sorted_games[1];\r\n    let number_three = sorted_games[2];\r\n    let path_one = \"./game/\".concat(sorted_games[0].gameId);\r\n    let path_two = \"./game/\".concat(sorted_games[1].gameId);\r\n    let path_three = \"./game/\".concat(sorted_games[2].gameId);\r\n    \r\n         \r\n    return(\r\n        <div className={css.pageborder}>\r\n            <div className={css.top}>\r\n                <br></br>\r\n                ABOUT CARDBORED \r\n            </div>\r\n            <div className={css.row}>\r\n                <div className={css.col1}>\r\n                    <div className={css.hot}>\r\n                        <b>How to Level Up?</b>                      \r\n                    </div>                    \r\n                    <div className={css.button}>\r\n                        Vote for a New Game!\r\n                    </div>\r\n                    <div className={css.button}>\r\n                        Submit a New Game!\r\n                    </div>\r\n                    <div className={css.button}>\r\n                        Leave a Feedback!\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={css.col2}>\r\n                    <div className={css.col3}>\r\n                        {about}\r\n                    </div>\r\n                    <div className={css.col3}>\r\n                    CardBored Managers:<br></br><br></br>\r\n                    {//managers \r\n                        users.map(people=>{\r\n                            console.log(people.id);\r\n                            return(\r\n                                <div>\r\n                                    {people.id}\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    </div>\r\n                    <div className={css.col3}>\r\n                     Contact Us: cardbored@gmail.com\r\n\r\n                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default About;","import React, { useContext, useState, useEffect } from \"react\"; //\r\nimport css from \"./GamePage.module.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport publicUrl from \"../utils/publicUrl.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataContext } from \"../contexts/DataContext.js\";\r\nimport initialData from \"../utils/initialData\";\r\nimport Xp from \"./XP\";\r\n\r\nfunction GamePage() {\r\n  let { gameId } = useParams();\r\n\r\n  console.log(gameId);\r\n\r\n  let { games, addVote, removeVote, addXPGame, currentUserId, users } = useContext(DataContext);\r\n\r\n  console.log(addVote);\r\n\r\n  let chosenGameData = games.find((a) => a.gameId === gameId);\r\n\r\n  let chosenUser = users.find((a)=>a.id === currentUserId);\r\n  let voted = 0;\r\n\r\n  console.log(chosenGameData);\r\n\r\n  let chosenGameDescription = chosenGameData.gameDescription;\r\n  let chosenGameName = chosenGameData.gameName;\r\n  let chosenGameRules = chosenGameData.gameRules;\r\n  let chosenGameStrategy = chosenGameData.gameStrategy;\r\n  let chosenGameImage = publicUrl(chosenGameData.photo);\r\n  console.log(chosenGameImage);\r\n\r\n  function giveXp() {\r\n    console.log(\"VOTEE\");\r\n    addXPGame(chosenUser.level, chosenUser.xp-=10,gameId,currentUserId);\r\n  }\r\n  \r\n\r\n  /////\r\n\r\n  function handleUnvote(e) {\r\n    console.log(\"UNVOTEE\");\r\n    removeVote(gameId);\r\n  }\r\n\r\n  function handleVote(e) {\r\n    console.log(\"VOTEE\");\r\n    addVote(gameId);\r\n    if(chosenGameData.votedOnce===0){\r\n      giveXp();\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  /////\r\n\r\n  return (\r\n    <div className={css.masterContainer}>\r\n      <div className={css.topic}></div>\r\n      <div className={css.row}>\r\n        <div className={css.column}>\r\n          <div className={css.failSafeColumn}>\r\n            <h2>{chosenGameName}</h2>\r\n            <div className={css.gameImage}>\r\n              <div className={css.fill}>\r\n                <img src={chosenGameImage} alt=\"Game_Image\" />\r\n              </div>\r\n            </div>\r\n            <div className={css.smallRow}>\r\n              <div className={css.smallColumnLeft}>\r\n                <div className={css.smallDesc}>\r\n                  Popularity: <br></br>\r\n                  Picked {\r\n                    games.find((a) => a.gameId === gameId).totalPicks\r\n                  }{\" \"}\r\n                  times!{\" \"}\r\n                </div>\r\n              </div>\r\n\r\n              <div className={css.smallColumnRight}>\r\n                <div className={css.smallDesc}>\r\n                  {games.find((a) => a.gameId === gameId).userGameVote === 0 ? (\r\n                    <button\r\n                      className={css.voteButton}\r\n                      onClick={(e) => handleVote()}\r\n                    >\r\n                      Vote\r\n                    </button>\r\n                  ) : (\r\n                    <button\r\n                      className={css.unvoteButton}\r\n                      onClick={(e) => handleUnvote()}\r\n                    >\r\n                      Unvote\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={css.clear}>\r\n          <div className={css.column}>\r\n            <h2 className={css.gameOptionsDesc}>Here's Some Info:</h2>\r\n            <div className={css.gameOptions}>\r\n              {\" \"}\r\n              Background: <br></br>\r\n              {chosenGameDescription}{\" \"}\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <div className={css.gameOptions}>\r\n              {\" \"}\r\n              Rules: <br></br>\r\n              {chosenGameRules}\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <div className={css.gameOptions}>\r\n              Helpful Strategies: <br></br> {chosenGameStrategy}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GamePage;","import React from \"react\";\r\nimport publicUrl from '../utils/publicUrl.js'\r\nimport css from \"./Friend.module.css\"\r\n\r\nfunction Friend(props){\r\n    return(\r\n        <div className={css.friend}>\r\n        <img alt=\"profilePicture\" width=\"50\" height=\"50\" src={publicUrl('/assets/unnamed.png')}></img>\r\n        <p>{props.name}</p>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Friend;","import React from \"react\";\r\nimport css from \"./ProfileGame.module.css\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nfunction ProfileGame(props){\r\n\r\n    let myColor = props.color;\r\n    return(\r\n        <div className={css.game} style={myColor}>\r\n            <Link to={\"/game/\".concat(props.gameId)}><a >{props.gameName}</a> <img height=\"75\" width=\"75\" src={'.'.concat(props.gamePhoto)}></img></Link>\r\n            \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileGame;","import React from \"react\";\r\nimport css from \"./Profile.module.css\";\r\nimport publicUrl from '../utils/publicUrl.js'\r\nimport data from \"../utils/initialData.js\";\r\nimport Friend from \"./Friend.js\";\r\nimport ProfileGame from \"./ProfileGame.js\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction Profile(props) {\r\n\r\n    function handleProfileEdit(e) {\r\n        console.log('Edit profile button was clicked!');\r\n    }\r\n\r\n    function handleGameUpload(e) {\r\n      console.log('Upload Game button was clicked!');\r\n  }\r\n  \r\n    //sorts the friends based on current user logged on\r\n    let myFriends = data.friends.filter(f => f.userId === data.currentUserId);\r\n    \r\n\r\n    let myupvotes = data.games.filter(g => g.votedOnce === 1);\r\n    \r\n  \r\n    let mygames = data.games.filter(g => g.addedBy === data.currentUserId);\r\n  \r\n\r\n\r\n  return (\r\n    <div className={css.profilePage}>\r\n\r\n\r\n      <div className={css.leftElement}>\r\n        <div className={css.userWindow}>\r\n          <img alt=\"profilePicture\" width=\"220\" height=\"220\"className={css.profilePicture} src={publicUrl('/assets/unnamed.png')}></img>\r\n          <div className={css.username}>{data.currentUserId}</div>\r\n          <div className={css.description}>I really like long walks on the beach and fine wine. But I also really like to do other things like doing activities!</div>\r\n        <button className={css.editProfileButton}>Edit Profile</button>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div className={css.rightElement}>\r\n        <div className={css.myGameShowcase}>\r\n          <div className={css.showcaseTitle}>\r\n            <h1> My Game Showcase:</h1>\r\n          </div>\r\n          <div className={css.gameList}>\r\n          {mygames.map((g,index) => (\r\n                <ProfileGame gameName={g.gameName}\r\n                    gameId={g.gameId}\r\n                    gamePhoto={g.photo}\r\n                    key={index} />\r\n              ))}\r\n          </div>\r\n          \r\n          \r\n        </div>\r\n        <Link to=\"../addgame\"><button className={css.uploadGameButton}>Upload a Game!</button></Link>\r\n\r\n        <div className={css.bottomElements}>\r\n          <div className={css.myFriends}>\r\n          <h1>My Friends</h1>\r\n          {myFriends.map((f,index) => (\r\n            <Friend name={f.friendId}\r\n                    key={index} />\r\n          ))}\r\n    \r\n          \r\n\r\n\r\n\r\n          \r\n          </div>\r\n          <div className={css.myUpvotes}>\r\n              <div className={css.title}>\r\n                <h1>My Upvotes</h1>\r\n              </div>\r\n              <div className={css.upvoteList}>\r\n              {myupvotes.map((g,index) => (\r\n                <ProfileGame gameName={g.gameName}\r\n                    gameId={g.gameId}\r\n                    gamePhoto={g.photo}\r\n                    key={index} />\r\n              ))}\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React, { useContext } from 'react';\r\nimport GamePage from './GamePage'\r\n\r\nfunction Game(){\r\n\r\n    return(\r\n        <GamePage/>\r\n    )\r\n}\r\n\r\nexport default Game;","import { useState } from \"react\";\r\n\r\nexport const useInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    bind: {\r\n      value,\r\n      onChange: event => {\r\n        setValue(event.target.value);\r\n      }\r\n    }\r\n  };\r\n};","import React, {useContext,useState } from 'react';\r\nimport { useInput } from '../hooks/input-hook.js';\r\nimport {DataContext} from '../contexts/DataContext.js';\r\nimport publicUrl from '../utils/publicUrl.js';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport css from './AddGame.module.css';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\n\r\nfunction AddGame(){\r\n\r\n    let {addGame, addXPGame, currentUserId, users} = useContext(DataContext);\r\n\r\n    let chosenUser = users.find((a)=>a.id === currentUserId);\r\n\r\n    const { value:gamename, bind:bindgamename} = useInput('');\r\n    const { value:tag1, bind:bindtag1} = useInput('');\r\n    const { value:tag2, bind:bindtag2} = useInput('');\r\n    const { value:tag3, bind:bindtag3} = useInput('');\r\n    const { value:image, bind:bindimage} = useInput('');\r\n    const { value:gamedesc, bind:bindgamedesc} = useInput('');\r\n    const { value:gamerules, bind:bindgamerules} = useInput('');\r\n    let gameId=\"unoId\";\r\n\r\n    \r\n    function addGameToData(name, t1,t2,t3,im,gd, gr){\r\n        console.log(name);\r\n        console.log(t1);\r\n        console.log(t2);\r\n        console.log(t3);\r\n        console.log(im);\r\n        console.log(gd);\r\n        console.log(gr);\r\n        addGame(name, t1,t2,t3,im,gd, gr, chosenUser.level, chosenUser.xp, currentUserId);\r\n\r\n    }\r\n\r\n    function giveXp() {\r\n        console.log(\"VOTEE\");\r\n        addXPGame(chosenUser.level, chosenUser.xp-=25,gameId,currentUserId);\r\n      }\r\n    \r\n\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        giveXp();\r\n        addGameToData(gamename, tag1, tag2, tag3, image, gamedesc, gamerules);\r\n        alert(`Submitted Game: `+gamename);\r\n        window.location.href=\"/creative-project-card-bored-games/\";\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div className={css.mastercontainer}>\r\n            <div className={css.text}>\r\n                Add a Game:\r\n            </div>\r\n            <div className={css.form}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>\r\n                    Game Name: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindgamename} required/> <br></br>\r\n                    Tag1: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindtag1} required/> <br></br>\r\n                    Tag2: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindtag2} required/> <br></br>\r\n                    Tag3: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindtag3} required/> <br></br>\r\n                    Link to an Image: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindimage} required/> <br></br>\r\n                    Game Description: <br></br>\r\n                    <input style={{marginBottom:10}} type=\"text\" {...bindgamedesc} required/> <br></br>\r\n                    Game Rules: <br></br>\r\n                    <input type=\"text\" {...bindgamerules} required/> <br></br>\r\n                    </label>\r\n                    <input style={{marginTop:20}} type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddGame;","import React, { useContext } from \"react\";\r\nimport { useInput } from \"../hooks/input-hook.js\";\r\nimport { DataContext } from \"../contexts/DataContext.js\";\r\nimport css from \"./Feedback.module.css\";\r\n\r\nfunction Feedback() {\r\n  let { feedback, addXPGame,currentUserId,users } = useContext(DataContext);\r\n  let gameId = \"unoId\";\r\n  let chosenUser = users.find((a)=>a.id === currentUserId);\r\n\r\n\r\n  var experienceRating;\r\n  const { value: userLikes, bind: bindUserLikes } = useInput(\"\");\r\n  const { value: userDislikes, bind: bindUserDislikes } = useInput(\"\");\r\n  const { value: userSuggestions, bind: bindUserSuggestions } = useInput(\"\");\r\n  const { value: userThoughts, bind: bindUserThoughts } = useInput(\"\");\r\n\r\n  function addFeedbackToData(xpRating, uLike, uDislike, uSug, uThought) {\r\n    //feedback(xpRating, uLike, uDislike, uSug, uThought);\r\n  }\r\n\r\n  const handleSubmit = (evt) => {\r\n    var radios = document.getElementsByName(\"singleSelection\");\r\n    for (var i = 0, length = radios.length; i < length; i++) {\r\n      // life is pain\r\n      if (radios[i].checked) {\r\n        experienceRating = radios[i].value;\r\n        break;\r\n      }\r\n    }\r\n    evt.preventDefault();\r\n    addXPGame(chosenUser.level, chosenUser.xp-=25,gameId,currentUserId);\r\n    alert(`Your submission has been recorded.`);\r\n    addFeedbackToData(\r\n      console.log(experienceRating),\r\n      console.log(userLikes),\r\n      console.log(userDislikes),\r\n      console.log(userSuggestions),\r\n      console.log(userThoughts),\r\n\r\n      experienceRating,\r\n      userLikes,\r\n      userDislikes,\r\n      userSuggestions,\r\n      userThoughts\r\n    );\r\n\r\n    window.location.href=\"/creative-project-card-bored-games/\";\r\n  };\r\n\r\n  return (\r\n    <div className={css.masterContainer}>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={css.title}>Feedback Form:</div>\r\n\r\n        <div className={css.title}>\r\n          <br></br>\r\n        </div>\r\n\r\n        <div className={css.masterForm}>\r\n          <label>\r\n            {\" \"}\r\n            <br></br> <br></br>\r\n            Rate your experience from 1 - 5: <br></br> <br></br>\r\n            <div>\r\n              <input type=\"radio\" name=\"singleSelection\" value=\"1\" required /> 1{\" \"}\r\n              <input type=\"radio\" name=\"singleSelection\" value=\"2\" required /> 2{\" \"}\r\n              <input type=\"radio\" name=\"singleSelection\" value=\"3\" required /> 3{\" \"}\r\n              <input type=\"radio\" name=\"singleSelection\" value=\"4\" required /> 4{\" \"}\r\n              <input type=\"radio\" name=\"singleSelection\" value=\"5\" required /> 5{\" \"}\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            What did you like about out website? <br></br>\r\n            <textarea\r\n              style={{\r\n                marginBottom: 20,\r\n                height: 71,\r\n                width: 400,\r\n                backgroundColor: \"white\",\r\n                outline: \"2px solid purple\",\r\n                fontSize: 16,\r\n              }}\r\n              type=\"text\"\r\n              {...bindUserLikes}\r\n              required\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            What did you dislike about our website? <br></br>\r\n            <textarea\r\n              style={{\r\n                marginBottom: 20,\r\n                height: 71,\r\n                width: 400,\r\n                outline: \"2px solid purple\",\r\n                fontSize: 16,\r\n              }}\r\n              type=\"text\"\r\n              {...bindUserDislikes}\r\n              required\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            What would you recommend we add? <br></br>\r\n            <textarea\r\n              style={{\r\n                marginBottom: 20,\r\n                height: 71,\r\n                width: 400,\r\n                outline: \"2px solid purple\",\r\n                fontSize: 16,\r\n              }}\r\n              type=\"text\"\r\n              {...bindUserSuggestions}\r\n              required\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            Please feel free to leave any other thoughts: <br></br>\r\n            <textarea\r\n              style={{\r\n                marginBottom: 20,\r\n                height: 205,\r\n                width: 500,\r\n                outline: \"2px solid purple\",\r\n                fontSize: 18,\r\n              }}\r\n              type=\"text\"\r\n              {...bindUserThoughts}\r\n              required\r\n            />\r\n            <br></br>\r\n            <input\r\n              style={{ marginTop: 10, marginBottom: 40, fontSize: 20 }}\r\n              type=\"submit\"\r\n              value=\"Submit Form\"\r\n            />\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feedback;","import React from 'react';\r\nimport {NavBar} from './NavBar';\r\nimport MainPage from './MainPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport DataContextProvider from '../contexts/DataContext.js'\r\nimport AllGames from './AllGames';\r\nimport About from './About';\r\nimport GamePage from './GamePage';\r\nimport Profile from './Profile';\r\nimport Game from './Game';\r\nimport AddGame from './AddGame';\r\nimport Feedback from './Feedback';\r\n\r\nfunction App() {\r\n  document.body.style = 'background: #42444D';\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <DataContextProvider>\r\n        <div className=\"App\">\r\n          <NavBar/>\r\n          <Switch>\r\n            <Route path=\"/allgames\">\r\n                <AllGames/>\r\n            </Route>\r\n            <Route path=\"/about\">\r\n                <About/>\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n                <Profile/>\r\n            </Route>\r\n            <Route path=\"/addgame\">\r\n                  <AddGame/>\r\n            </Route>\r\n            <Route path=\"/feedback\">\r\n                  <Feedback/>\r\n            </Route>\r\n            <Route path=\"/game/:gameId?\">\r\n                  <Game/>\r\n            </Route>\r\n\r\n            <Route path=\"/\">\r\n                  <MainPage/>\r\n            </Route>\r\n            \r\n          \r\n          </Switch>\r\n          \r\n        </div>\r\n      </DataContextProvider>\r\n    </Router>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"masterContainer\":\"GamePage_masterContainer__3a9Pv\",\"clear\":\"GamePage_clear__3M5-_\",\"column\":\"GamePage_column__1OtMc\",\"gameOptions\":\"GamePage_gameOptions__1rN1I\",\"gameOptionsDesc\":\"GamePage_gameOptionsDesc__so3Em\",\"row\":\"GamePage_row___93yi\",\"smallColumnLeft\":\"GamePage_smallColumnLeft__HA2s_\",\"smallColumnRight\":\"GamePage_smallColumnRight__3_mWa\",\"smallDesc\":\"GamePage_smallDesc__3IB8w\",\"smallRow\":\"GamePage_smallRow__23cT2\",\"topic\":\"GamePage_topic__3erh0\",\"gameImage\":\"GamePage_gameImage__1k7dP\",\"fill\":\"GamePage_fill__3pyCQ\",\"unvoteButton\":\"GamePage_unvoteButton__34bWm\",\"voteButton\":\"GamePage_voteButton__2TVCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"masterContainer\":\"Feedback_masterContainer__1Sn1u\",\"title\":\"Feedback_title__J3nGl\",\"masterForm\":\"Feedback_masterForm__5d4M0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mastercontainer\":\"AddGame_mastercontainer__2IHJK\",\"text\":\"AddGame_text__1gYnI\",\"form\":\"AddGame_form__3z7O0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"Profile_profilePage__2lW4v\",\"leftElement\":\"Profile_leftElement__3R15v\",\"rightElement\":\"Profile_rightElement__3lhWr\",\"userWindow\":\"Profile_userWindow__2NCK2\",\"profilePicture\":\"Profile_profilePicture__1cVR5\",\"username\":\"Profile_username__3QFhW\",\"description\":\"Profile_description__975R6\",\"editProfileButton\":\"Profile_editProfileButton__34iap\",\"myGameShowcase\":\"Profile_myGameShowcase__3WbIf\",\"title\":\"Profile_title__u17P6\",\"gameList\":\"Profile_gameList__39UX1\",\"uploadGameButton\":\"Profile_uploadGameButton__1W2-4\",\"bottomElements\":\"Profile_bottomElements__2XSbH\",\"myFriends\":\"Profile_myFriends__JmBU9\",\"myUpvotes\":\"Profile_myUpvotes__32hG9\",\"upvoteList\":\"Profile_upvoteList__1OAk8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"Search_searchbar__2jwOR\",\"bar\":\"Search_bar__eln_M\",\"results\":\"Search_results__3sqnU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"NavBar_header__3xbRO\",\"navbar\":\"NavBar_navbar__-bXdF\",\"logo\":\"NavBar_logo__BLFoT\",\"mainNav\":\"NavBar_mainNav__3ICSW\",\"navItem\":\"NavBar_navItem__2xZTo\",\"profile\":\"NavBar_profile__12glZ\",\"profileSettings\":\"NavBar_profileSettings__3gSGx\",\"gear\":\"NavBar_gear__26I0A\",\"submenu\":\"NavBar_submenu__3FVWv\",\"dropdown\":\"NavBar_dropdown__Qiuup\",\"submenuitem\":\"NavBar_submenuitem__y9yhS\",\"items\":\"NavBar_items___QDLn\"};"],"sourceRoot":""}